##!/bin/bash

##  +-----------------------------------+-----------------------------------+
##  |                                                                       |
##  | Copyright (c) 2014-2019, https://github.com/andresgongora/synth-shell |
##  | Visit the above URL for details of license and authorship.            |
##  |                                                                       |
##  | This program is free software: you can redistribute it and/or modify  |
##  | it under the terms of the GNU General Public License as published by  |
##  | the Free Software Foundation, either version 3 of the License, or     |
##  | (at your option) any later version.                                   |
##  |                                                                       |
##  | This program is distributed in the hope that it will be useful,       |
##  | but WITHOUT ANY WARRANTY; without even the implied warranty of        |
##  | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         |
##  | GNU General Public License for more details.                          |
##  |                                                                       |
##  | You should have received a copy of the GNU General Public License     |
##  | along with this program. If not, see <http://www.gnu.org/licenses/>.  |
##  |                                                                       |
##  +-----------------------------------------------------------------------+
##
##
##  =======================
##  WARNING!!
##  DO NOT EDIT THIS FILE!!
##  =======================
##
##  This file was generated by an installation script.
##  If you edit this file, it might be overwritten without warning
##  and you will lose all your changes.
##
##  Visit for instructions and more information:
##  https://github.com/andresgongora/synth-shell/
##



loadConfigFile() {
	local config_file=$1
	if [ ! -f $config_file ]; then
		exit
	fi
	while IFS="" read -r p || [ -n "$p" ]
	do
		local line=$(echo "$p" |\
		             sed -e '/^$/d;
		                     /^[ \t]*\#/d;
		                     s/[ \t][ \t]*\#.*//g;
		                     s/^[ \t]*//g;
		                     s/[ \t]*$//g')
		local line_end_trimmed=$(echo "$line" | sed -n 's/[ \t]*\\$//p')
		if [ -z "$line_end_trimmed" ]; then
			local is_multiline_next=false
		else
			local is_multiline_next=true
			local line=$line_end_trimmed
		fi
		set -- $( echo "$line" | sed -e 's/\\//g;s/".*"/X/g' )
		if [ ! -z "$line" ] && [ "$#" -gt 1 ]; then
			local config_key_name=$1
			local config_param=$(echo "$line" |\
			                     sed -e "s/$config_key_name\s*//g" |\
			                     sed -e "s/^\"//g;s/\"$//g")
			eval config_key_current_value=\$$config_key_name
			if [ ! -z "$config_key_current_value" ]; then
				export "${config_key_name}"="$config_param"
			fi
		elif [ "$#" -eq 1 ] && $is_multiline ; then
			local line_end_trimmed=$(echo $line |\
			                         sed -n 's/[ \t]*\\$//p')
			if [ -z "$line_end_trimmed" ]; then
				local multi_line=false
			else
				echo ":) $line_end_trimmed"
				local multi_line=true
				local line=$line_end_trimmed
			fi
			local config_param_old=$config_param
			local config_param=$(echo "$line" |\
			                     sed "s/^\"//g;s/\"$//g")
			eval config_key_current_value=\$$config_key_name
			if [ ! -z "$config_key_current_value" ]; then
				export "${config_key_name}"="$config_key_current_value$config_param"
			fi
		fi
		local is_multiline=$is_multiline_next
	done < $config_file
}
get8bitCode()
{
	CODE=$1
	case $CODE in
		default)
			echo 9
			;;
		none)
			echo 9
			;;
		black)
			echo 0
			;;
		red)
			echo 1
			;;
		green)
			echo 2
			;;
		yellow)
			echo 3
			;;
		blue)
			echo 4
			;;
		magenta|purple|pink)
			echo 5
			;;
		cyan)
			echo 6
			;;
		light-gray)
			echo 7
			;;
		dark-gray)
			echo 60
			;;
		light-red)
			echo 61
			;;
		light-green)
			echo 62
			;;
		light-yellow)
			echo 63
			;;
		light-blue)
			echo 64
			;;
		light-magenta)
			echo 65
			;;
		light-cyan)
			echo 66
			;;
		white)
			echo 67
			;;
		*)
			echo 0
	esac
}
getColorCode()
{
	COLOR=$1
	if [ $COLOR -eq $COLOR ] 2> /dev/null; then
		if [ $COLOR -gt 0 -a $COLOR -lt 256 ]; then
			echo "38;5;$COLOR"
		else
			echo 0
		fi
	else
		BITCODE=$(get8bitCode $COLOR)
		COLORCODE=$(($BITCODE + 30))
		echo $COLORCODE
	fi
}
getBackgroundCode()
{
	COLOR=$1
	if [ $COLOR -eq $COLOR ] 2> /dev/null; then
		if [ $COLOR -gt 0 -a $COLOR -lt 256 ]; then
			echo "48;5;$COLOR"
		else
			echo 0
		fi
	else
		BITCODE=$(get8bitCode $COLOR)
		COLORCODE=$(($BITCODE + 40))
		echo $COLORCODE
	fi
}
getEffectCode()
{
	EFFECT=$1
	NONE=0
	case $EFFECT in
	none)
		echo $NONE
		;;
	default)
		echo $NONE
		;;
	bold)
		echo 1
		;;
	bright)
		echo 1
		;;
	dim)
		echo 2
		;;
	underline)
		echo 4
		;;
	blink)
		echo 5
		;;
	reverse)
		echo 7
		;;
	hidden)
		echo 8
		;;
	strikeout)
		echo 9
		;;
	*)
		echo $NONE
	esac
}
getFormattingSequence()
{
	START='\e[0;'
	MIDLE=$1
	END='m'
	echo -n "$START$MIDLE$END"
}
applyCodeToText()
{
	local RESET=$(getFormattingSequence $(getEffectCode none))
	TEXT=$1
	CODE=$2
	echo -n "$CODE$TEXT$RESET"
}
getFormatCode()
{
	local RESET=$(getFormattingSequence $(getEffectCode none))
	if [ "$#" -eq 0 ]; then
		echo -n "$RESET"
	elif [ "$#" -eq 1 ]; then
		TEXT_COLOR=$(getFormattingSequence $(getColorCode $1))
		echo -n "$TEXT_COLOR"
	else
		FORMAT=""
		while [ "$1" != "" ]; do
			TYPE=$1
			ARGUMENT=$2
			case $TYPE in
			-c)
				CODE=$(getColorCode $ARGUMENT)
				;;
			-b)
				CODE=$(getBackgroundCode $ARGUMENT)
				;;
			-e)
				CODE=$(getEffectCode $ARGUMENT)
				;;
			*)
				CODE=""
			esac
			if [ "$FORMAT" != "" ]; then
				FORMAT="$FORMAT;"
			fi
			FORMAT="$FORMAT$CODE"
			shift
			shift
		done
		FORMAT_CODE=$(getFormattingSequence $FORMAT)
		echo -n "${FORMAT_CODE}"
	fi
}
formatText()
{
	local RESET=$(getFormattingSequence $(getEffectCode none))
	if [ "$#" -eq 0 ]; then
		echo -n "${RESET}"
	elif [ "$#" -eq 1 ]; then
		TEXT=$1
		echo -n "${TEXT}${RESET}"
	else
		TEXT=$1
		FORMAT_CODE=$(getFormatCode "${@:2}")
		applyCodeToText "$TEXT" "$FORMAT_CODE"
	fi
}
removeColorCodes()
{
	printf "$1" | sed 's/\x1b\[[0-9;]*m//g'
}
shortenPath()
{
	local path=$1
	local max_length=$2
	local default_max_length=25
	local trunc_symbol=".."
	if   [ -z "$path" ]; then
		echo ""
		exit
	elif [ -z "$max_length" ]; then
		local max_length=$default_max_length
	fi
	local path=${path/#$HOME/\~}
	local dir=${path##*/}
	local dir_length=${#dir}
	local path_length=${#path}
	local print_length=$(( ( max_length < dir_length ) ? dir_length : max_length ))
	if [ $path_length -gt $print_length ]; then
		local offset=$(( $path_length - $print_length ))
		local truncated_path=${path:$offset}
		local clean_path=${truncated_path#*/}
		local short_path=${trunc_symbol}/${clean_path}
	else
		local short_path=$path
	fi
	echo $short_path
}
enableTerminalLineWrap()
{
	printf '\e[?7h'
}
disableTerminalLineWrap()
{
	printf '\e[?7l'
}
saveCursorPosition()
{
	printf "\e[s"
}
moveCursorToSavedPosition()
{
	printf "\e[u"
}
moveCursorToRowCol()
{
	local row=$1
	local col=$2
	printf "\e[${row};${col}H"
}
moveCursorHome()
{
	printf "\e[;H"
}
moveCursorUp()
{
	local inc=$1
	if   [ -z "$inc" ]; then
		printf "\e[1A"
	elif [ $inc -gt 0 ]; then
		printf "\e[${inc}A"
	fi
}
moveCursorDown()
{
	local inc=$1
	if   [ -z "$inc" ]; then
		printf "\e[1B"
	elif [ $inc -gt 0 ]; then
		printf "\e[${inc}B"
	fi
}
moveCursorLeft()
{
	local inc=$1
	if   [ -z "$inc" ]; then
		printf "\e[1C"
	elif [ $inc -gt 0 ]; then
		printf "\e[${inc}C"
	fi
}
moveCursorRight()
{
	local inc=$1
	if   [ -z "$inc" ]; then
		printf "\e[1D"
	elif [ $inc -gt 0 ]; then
		printf "\e[${inc}D"
	fi
}
getTerminalNumRows()
{
	tput lines
}
getTerminalNumCols()
{
	tput cols
}
getTextNumRows()
{
	local rows=$(echo -e "$1" | wc -l )
	echo "$rows"
}
getTextNumCols()
{
	local columns=$(echo -e "$1" | sed 's/\x1b\[[0-9;]*m//g' | wc -L )
	echo "$columns"
}
getTextShape()
{
	echo "$(getTextNumRows) $(getTextNumCols)"
}
printWithOffset()
{
	local row=$1
	local col=$2
	local text=${@:3}
	moveCursorDown "$row"
	if [ $col -gt 0 ]; then
		col_spacer="\\\\e[${col}C"
		local text=$(echo "$text" |\
		             sed "s/^/$col_spacer/g;s/\\\\n/\\\\n$col_spacer/g")
	fi
	disableTerminalLineWrap
	echo -e "${text}"
	enableTerminalLineWrap
}
printEmptyLines()
{
	local num_lines=$1
	if [ -n $num_lines ]; then
		while [ $num_lines -gt 0 ]; do
			echo ""
			((num_lines--))
		done
	fi
}
printTwoElementsSideBySide()
{
	local element_1=$1
	local element_2=$2
	local print_cols_max=$3
	local term_cols=$(getTerminalNumCols)
	if [ ! -z "$print_cols_max" ]; then
		local term_cols=$(( ( $term_cols > $print_cols_max ) ?\
			$print_cols_max : $term_cols ))
	fi
	local e_1_cols=$(getTextNumCols "$element_1")
	local e_1_rows=$(getTextNumRows "$element_1")
	local e_2_cols=$(getTextNumCols "$element_2")
	local e_2_rows=$(getTextNumRows "$element_2")
	local free_cols=$(( $term_cols - $e_1_cols - $e_2_cols ))
	if [ $e_1_cols -gt 0 ] && [ $e_2_cols -gt 0 ]; then
		local h_pad=$(( $free_cols/3 ))
		local e_1_h_pad=$h_pad
		local e_2_h_pad=$(( $e_1_cols + 2*$h_pad ))
	elif  [ $e_1_cols -gt 0 ]; then
		local h_pad=$(( $free_cols/2 ))
		local e_1_h_pad=$h_pad
		local e_2_h_pad=0
	elif  [ $e_2_cols -gt 0 ]; then
		local h_pad=$(( $free_cols/2 ))
		local e_1_h_pad=0
		local e_2_h_pad=$h_pad
	else
		local e_1_h_pad=0
		local e_2_h_pad=0
	fi
	local e_1_v_pad=$(( ( $e_1_rows > $e_2_rows ) ?\
		0 : (( ($e_2_rows - $e_1_rows)/2 )) ))
	local e_2_v_pad=$(( ( $e_2_rows > $e_1_rows ) ?\
		0 : (( ($e_1_rows - $e_2_rows)/2 )) ))
	local empty_v_pad=$(( ( $e_2_rows > $e_1_rows ) ?\
		$e_2_rows : $e_1_rows ))
	printEmptyLines $empty_v_pad
	moveCursorUp $empty_v_pad
	saveCursorPosition
	printWithOffset $e_1_v_pad $e_1_h_pad "$element_1"
	moveCursorToSavedPosition
	printWithOffset $e_2_v_pad $e_2_h_pad "$element_2"
	moveCursorToSavedPosition
	local max_rows=$(( ( $e_1_rows > $e_2_rows ) ? $e_1_rows : $e_2_rows ))
	moveCursorDown $(( $max_rows ))
}
status()
{
getLocalIPv6()
{
	local grep_reggex='^\s*inet6\s+(addr:?\s*)?\K((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(%.+)?'
	if   ( which ip > /dev/null 2>&1 ); then
		local result=$($(which ip) -family inet6 addr show |\
		grep -oP "$grep_reggex" |\
		sed '/::1/d;:a;N;$!ba;s/\n/,/g')
	elif ( which ifconfig > /dev/null 2>&1 ); then
		local result=$($(which ifconfig) |\
		grep -oP "$grep_reggex" |\
		sed '/::1/d;:a;N;$!ba;s/\n/,/g')
	else
		local result="Error"
	fi
	[ $result ] && printf $result || printf "N/A"
}
getExternalIPv6()
{
	if   ( which dig > /dev/null 2>&1 ); then
		local result=$($(which dig) TXT -6 +short o-o.myaddr.l.google.com @ns1.google.com |\
		               awk -F\" '{print $2}')
	elif ( which nslookup > /dev/nul 2>&1 ); then
		local result=$($(which nslookup) -q=txt o-o.myaddr.l.google.com 2001:4860:4802:32::a |\
		               awk -F \" 'BEGIN{RS="\r\n"}{print $2}END{RS="\r\n"}')
	elif ( which curl > /dev/null 2>&1 ); then
		local result=$($(which curl) -s https://api6.ipify.org)
	elif ( which wget > /dev/null 2>&1 ); then
		local result=$($(which wget) -q -O - https://api6.ipify.org)
	else
		local result="Error"
	fi
	[ $result ] && printf $result || printf "N/A"
}
printInfo()
{
	label=$1
	value=$2
	pad=$info_label_width
	printf "${fc_info}%-${pad}s${fc_highlight}${value}${fc_none}\n" "$label"
}
printBar()
{
	local current=$1
	local max=$2
	local size=$3
	local bracket_color=$4
	local bar_color=$5
	local num_bars=$(bc <<< "$size * $current / $max")
	if [ $num_bars -gt $size ]; then
		num_bars=$size
	fi
	printf "${bracket_color}[${bar_color}"
	i=0
	while [ $i -lt $num_bars ]; do
		printf "|"
		i=$[$i+1]
	done
	while [ $i -lt $size ]; do
		printf " "
		i=$[$i+1]
	done
	printf "${bracket_color}]${fc_none}"
}
printFraction()
{
	local a=$1
	local b=$2
	local padding=$3
	local units=$4
	local deco_color=$5
	local num_color=$6
	local units_color=$7
	if [ $units == "none" ]; then local units=""; fi
	printf "${num_color}%${padding}s" $a
	printf "${deco_color}/"
	printf "${num_color}%-${padding}s" $b
	printf "${units_color} ${units}${fc_none}"
}
printMonitor()
{
	if [ -z $bar_num_digits ]; then exit 1; fi
	if [ -z $fc_deco        ]; then exit 1; fi
	if [ -z $fc_ok          ]; then exit 1; fi
	if [ -z $fc_info        ]; then exit 1; fi
	if [ -z $fc_crit        ]; then exit 1; fi
	local current=$1
	local max=$2
	local crit_percent=$3
	local print_as_percentage=$4
	local units=$5
	local label=${@:6}
	local pad=$info_label_width
	if [ -z $max ]; then local max=0; fi
	if [ -z $crit_percent ]; then local local crit_percent=100; fi
	if [ "$crit_percent" -gt 100 ]; then local crit_percent=100; fi
	if [ "$max" -eq 0 ]; then
		local percent=100
	else
		local percent=$(bc <<< "$current*100/$max")
	fi
	local fc_bar_1=$fc_deco
	local fc_bar_2=$fc_ok
	local fc_txt_1=$fc_info
	local fc_txt_2=$fc_ok
	local fc_txt_3=$fc_ok
	if   [ $percent -gt 99 ]; then
		local fc_bar_2=$fc_error
		local fc_txt_2=$fc_crit
	elif [ $percent -gt $crit_percent ]; then
		local fc_bar_2=$fc_crit
		local fc_txt_2=$fc_crit
	fi
	printf "${fc_info}%-${pad}s" "$label"
	printBar $current $max $bar_length $fc_bar_1 $fc_bar_2
	if $print_as_percentage; then
		printf "${fc_txt_2}%${bar_num_digits}s${fc_txt_1} %%%%${fc_none}" $percent
	else
		printf " "
		printFraction $current $max $bar_num_digits $units \
		              $fc_txt_1 $fc_txt_2 $fc_txt_3
	fi
}
printInfoOS()
{
	if   [ -f /etc/os-release ]; then
		local os_name=$(sed -En 's/PRETTY_NAME="(.*)"/\1/p' /etc/os-release)
	elif [ -f /usr/lib/os-release ]; then
		local os_name=$(sed -En 's/PRETTY_NAME="(.*)"/\1/p' /usr/lib/os-release)
	else
		local os_name=$(uname -sr)
	fi
	printInfo "OS" "$os_name"
}
printInfoKernel()
{
	local kernel=$(uname -r)
	printInfo "Kernel" "$kernel"
}
printInfoCPU()
{
	local cpu=$(grep -m 1 "model name" /proc/cpuinfo |\
	            sed -n 's/model name\s*:\s*//;
	                    s/\s*@.*//;
	                    s/(R)//;
	                    s/(TM)//;
	                    s/CPU//;
	                    s/\s\s\+/ /;
	                    p')
	printInfo "CPU" "$cpu"
}
printInfoGPU()
{
	local gpu_id=$(lspci 2>/dev/null | grep ' VGA ' | cut -d" " -f 1)
	echo -e "$gpu_id" | while read line ; do
	   	local gpu=$(lspci -v -s "$line" 2>/dev/null |\
		            head -n 1 |\
		            sed 's/^.*: //g;s/(.*$//g;
		                 s/Corporation//g;
		                 s/Core Processor//g;
		                 s/Series//g;
		                 s/Chipset//g;
		                 s/Graphics//g;
		                 s/processor//g;
		                 s/Controller//g;
		                 s/Family//g;
		                 s/Inc.//g;
		                 s/,//g;
		                 s/Technology//g;
		                 s/Mobility/M/g;
		                 s/Advanced Micro Devices/AMD/g;
		                 s/\[AMD\/ATI\]/ATI/g;
		                 s/Integrated Graphics Controller/HD Graphics/g;
		                 s/Integrated Controller/IC/g;
		                 s/  */ /g'
		           )
		if [ "${#gpu}" -gt 30 ]; then
			local gpu=$(echo "$gpu" | sed 's/\[.*\]//g' )
		fi
		printInfo "GPU" "$gpu"
	done
}
printInfoShell()
{
	local shell=$(readlink /proc/$$/exe)
	printInfo "Shell" "$shell"
}
printInfoDate()
{
	local sys_date=$(date +"$date_format")
	printInfo "Date" "$sys_date"
}
printInfoUptime()
{
	local uptime=$(uptime -p | sed 's/^[^,]*up *//g;
	                                s/s//g;
	                                s/ year/y/g;
	                                s/ month/m/g;
	                                s/ week/w/g;
	                                s/ day/d/g;
	                                s/ hour, /:/g;
	                                s/ minute//g')
	printInfo "Uptime" "$uptime"
}
printInfoUser()
{
	printInfo "User" "$USER@$HOSTNAME"
}
printInfoNumLoggedIn()
{
	num_users=$(uptime |\
	            sed -n 's/.*\([[0-9:]]* users\).*/\1/p')
	printInfo "Logged in" "$num_users"
}
printInfoNameLoggedIn()
{
	local name_users=$(who | awk '{print $1;}' | sort -u)
	printInfo "Logged in" "$name_users"
}
printInfoLocalIPv4()
{
	local grep_reggex='^\s*inet\s+(addr:?\s*)?\K(((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?))'
	if   ( which ip > /dev/null 2>&1 ); then
		local ip=$($(which ip) -family inet addr show |\
		           grep -oP "$grep_reggex" |\
		           sed '/127.0.0.1/d;:a;N;$!ba;s/\n/,/g')
	elif ( which ifconfig > /dev/null 2>&1 ); then
		local ip=$($(which ifconfig) |\
		           grep -oP "$grep_reggex"|\
		           sed '/127.0.0.1/d;:a;N;$!ba;s/\n/,/g')
	else
		local result="Error"
	fi
	local result=$(echo "$result" | sed 's/,/, /g')
	[ $ip ] || local ip="N/A"
	printInfo "Local IPv4" "$ip"
}
printInfoExternalIPv4()
{
	if   ( which dig > /dev/null 2>&1 ); then
		local ip=$(dig +time=3 +tries=1 TXT -4 +short \
		           o-o.myaddr.l.google.com @ns1.google.com |\
		           awk -F\" '{print $2}')
	elif ( which drill > /dev/null 2>&1 ); then
		local ip=$(drill +time=3 +tries=1 TXT -4 +short \
		           o-o.myaddr.l.google.com @ns1.google.com |\
		           grep IN | tail -n 1 | cut -f5 -s |\
		           awk -F\" '{print $2}')
	elif ( which nslookup > /dev/null 2>&1 ); then
		local ip=$(nslookup -timeout=3 -q=txt \
		           o-o.myaddr.l.google.com 216.239.32.10 |\
		           awk -F \" 'BEGIN{RS="\r\n"}{print $2}END{RS="\r\n"}')
	elif ( which curl > /dev/null 2>&1 ); then
		local ip=$(curl -s https://api.ipify.org)
	elif ( which wget > /dev/null 2>&1 ); then
		local ip=$(wget -q -O - https://api.ipify.org)
	else
		local result="Error"
	fi
	[ $ip ] || local ip="N/A"
	printInfo "External IPv4" "$ip"
}
printInfoSystemctl()
{
	local systcl_num_failed=$(systemctl --failed |\
	                          grep "loaded units listed" |\
	                          head -c 1)
	if   [ "$systcl_num_failed" -eq "0" ]; then
		local sysctl="All services OK"
	elif [ "$systcl_num_failed" -eq "1" ]; then
		local sysctl="${fc_error}1 service failed!${fc_none}"
	else
		local sysctl="${fc_error}$systcl_num_failed services failed!${fc_none}"
	fi
	printInfo "Services" "$sysctl"
}
printInfoColorpaletteSmall()
{
	local char="▀▀"
	local palette=$(printf '%s'\
	"$(formatText "$char" -c black -b dark-gray)"\
	"$(formatText "$char" -c red -b light-red)"\
	"$(formatText "$char" -c green -b light-green)"\
	"$(formatText "$char" -c yellow -b light-yellow)"\
	"$(formatText "$char" -c blue -b light-blue)"\
	"$(formatText "$char" -c magenta -b light-magenta)"\
	"$(formatText "$char" -c cyan -b light-cyan)"\
	"$(formatText "$char" -c light-gray -b white)")
	printInfo "Color palette" "$palette"
}
printInfoColorpaletteFancy()
{
	local palette_top=$(printf '%s'\
		"$(formatText "▄" -c dark-gray)$(formatText "▄" -c dark-gray -b black)$(formatText "█" -c black) "\
		"$(formatText "▄" -c light-red)$(formatText "▄" -c light-red -b red)$(formatText "█" -c red) "\
		"$(formatText "▄" -c light-green)$(formatText "▄" -c light-green -b green)$(formatText "█" -c green) "\
		"$(formatText "▄" -c light-yellow)$(formatText "▄" -c light-yellow -b yellow)$(formatText "█" -c yellow) "\
		"$(formatText "▄" -c light-blue)$(formatText "▄" -c light-blue -b blue)$(formatText "█" -c blue) "\
		"$(formatText "▄" -c light-magenta)$(formatText "▄" -c light-magenta -b magenta)$(formatText "█" -c magenta) "\
		"$(formatText "▄" -c light-cyan)$(formatText "▄" -c light-cyan -b cyan)$(formatText "█" -c cyan) "\
		"$(formatText "▄" -c white)$(formatText "▄" -c white -b light-gray)$(formatText "█" -c light-gray) ")
	local palette_bot=$(printf '%s'\
		"$(formatText "██" -c dark-gray)$(formatText "▀" -c black) "\
		"$(formatText "██" -c light-red)$(formatText "▀" -c red) "\
		"$(formatText "██" -c light-green)$(formatText "▀" -c green) "\
		"$(formatText "██" -c light-yellow)$(formatText "▀" -c yellow) "\
		"$(formatText "██" -c light-blue)$(formatText "▀" -c blue) "\
		"$(formatText "██" -c light-magenta)$(formatText "▀" -c magenta) "\
		"$(formatText "██" -c light-cyan)$(formatText "▀" -c cyan) "\
		"$(formatText "██" -c white)$(formatText "▀" -c light-gray) ")
	printInfo "" "$palette_top"
	printInfo "Color palette" "$palette_bot"
}
printInfoSpacer()
{
	printInfo "" ""
}
printInfoCPUUtilization()
{
	local avg_load=$(uptime | sed 's/^.*load average: //g')	
	printInfo "Sys load" "$avg_load"
}
printInfoCPUTemp()
{
	if ( which sensors > /dev/null 2>&1 ); then
		local temp_line=$(sensors |\
		                  grep Core |\
		                  head -n 1 |\
		                  sed 's/^.*:[ \t]*//g;s/[\(\),]//g')
		local units=$(echo $temp_line |\
		              sed -n 's/.*\(°[[CF]]*\).*/\1/p')
		local current=$(echo $temp_line |\
		                sed -n 's/^.*+\(.*\)°[[CF]]*[ \t]*h.*/\1/p')
		local high=$(echo $temp_line |\
		             sed -n 's/^.*high = +\(.*\)°[[CF]]*[ \t]*c.*/\1/p')
		local max=$(echo $temp_line |\
		            sed -n 's/^.*crit = +\(.*\)°[[CF]]*[ \t]*.*/\1/p')
		if   (( $(echo "$current < $high" |bc -l) )); then 
			local temp="$current$units";
		elif (( $(echo "$current < $max" |bc -l) )); then 
			local temp="$fc_crit$current$units";
		else                             
			local temp="$fc_error$current$units";
		fi
		printInfo "CPU temp" "$temp"
	else
		printInfo "CPU temp" "lm-sensors not installed"
	fi
}
printMonitorCPU()
{
	local message="Sys load avg"
	local units="none"
	local current=$(awk '{avg_1m=($1)} END {printf "%3.2f", avg_1m}' /proc/loadavg)
	local max=$(nproc --all)
	local as_percentage=$1
	if [ -z "$as_percentage" ]; then local as_percentage=false; fi
	printMonitor $current $max $crit_cpu_percent \
	             $as_percentage $units $message
}
printMonitorRAM()
{
	local message="Memory"
	local units="MB"
	local mem_info=$('free' -m | head -n 2 | tail -n 1)
	local current=$(echo "$mem_info" | awk '{mem=($2-$7)} END {printf mem}')
	local max=$(echo "$mem_info" | awk '{mem=($2)} END {printf mem}')
	local as_percentage=$1
	if [ -z "$as_percentage" ]; then local as_percentage=false; fi
	printMonitor $current $max $crit_ram_percent \
	             $as_percentage $units $message
}
printMonitorSwap()
{
	local message="Swap"
	local units="MB"
	local as_percentage=$1
	if [ -z "$as_percentage" ]; then local as_percentage=false; fi
	local num_swap_devs=$(($(wc -l /proc/swaps | awk '{print $1;}') -1))
	if [ "$num_swap_devs" -lt 1 ]; then
		local pad=${info_label_width}
		printf "${fc_info}%-${pad}s${fc_highlight}N/A${fc_none}" "${message}"
	else
		local swap_info=$('free' -m | tail -n 1)
		local current=$(echo "$swap_info" |\
		                awk '{SWAP=($3)} END {printf SWAP}')
		local max=$(echo "$swap_info" |\
		            awk '{SWAP=($2)} END {printf SWAP}')
		printMonitor $current $max $crit_swap_percent \
		             $as_percentage $units $message
	fi
}
printMonitorHDD()
{
	local as_percentage=$1
	if [ -z "$as_percentage" ]; then local as_percentage=false; fi
	local message="Storage /"
	local units="GB"
	local current=$(df -B1G / | grep "/" |awk '{key=($3)} END {printf key}')
	local max=$(df -B1G / | grep "/" | awk '{key=($2)} END {printf key}')
	printMonitor $current $max $crit_hdd_percent \
	             $as_percentage $units $message
}
printMonitorHome()
{
	local as_percentage=$1
	if [ -z "$as_percentage" ]; then local as_percentage=false; fi
	local message="Storage /home"
	local units="GB"
	local current=$(df -B1G ~ | grep "/" |awk '{key=($3)} END {printf key}')
	local max=$(df -B1G ~ | grep "/" | awk '{key=($2)} END {printf key}')
	printMonitor $current $max $crit_home_percent \
	             $as_percentage $units $message
}
printMonitorCPUTemp()
{
	if ( which sensors > /dev/null 2>&1 ); then
		local temp_line=$(sensors |\
		                  grep Core |\
		                  head -n 1 |\
		                  sed 's/^.*:[ \t]*//g;s/[\(\),]//g')
		local units=$(echo $temp_line |\
		              sed -n 's/.*\(°[[CF]]*\).*/\1/p' )
		local current=$(echo $temp_line |\
		                sed -n 's/^.*+\(.*\)°[[CF]]*[ \t]*h.*/\1/p' )
		local high=$(echo $temp_line |\
		            sed -n 's/^.*high = +\(.*\)°[[CF]]*[ \t]*c.*/\1/p' )
		local max=$(echo $temp_line |\
		              sed -n 's/^.*crit = +\(.*\)°[[CF]]*[ \t]*.*/\1/p' )
		local crit_percent=$(bc <<< "$high*100/$max")
		printMonitor $current $max $crit_percent \
	        	     false $units "CPU temp"
	else
		printInfo "CPU temp" "lm-sensors not installed"
	fi
}
printStatusInfo()
{
	statusSwitch()
	{
		case $1 in
			OS)             printInfoOS;;
			KERNEL)         printInfoKernel;;
			CPU)            printInfoCPU;;
			GPU)            printInfoGPU;;
			SHELL)          printInfoShell;;
			DATE)           printInfoDate;;
			UPTIME)         printInfoUptime;;
			USER)           printInfoUser;;
			NUMLOGGED)      printInfoNumLoggedIn;;
			NAMELOGGED)     printInfoNameLoggedIn;;
			LOCALIPV4)      printInfoLocalIPv4;;
			EXTERNALIPV4)   printInfoExternalIPv4;;
			SERVICES)       printInfoSystemctl;;
			PALETTE_SMALL)  printInfoColorpaletteSmall;;
			PALETTE)        printInfoColorpaletteFancy;;
			SPACER)         printInfoSpacer;;
			CPUUTILIZATION) printInfoCPUUtilization;;
			CPUTEMP)        printInfoCPUTemp;;
			SYSLOAD_MON)    printMonitorCPU;;
			SYSLOAD_MON%)   printMonitorCPU        true;;
			MEMORY_MON)     printMonitorRAM;;
			MEMORY_MON%)    printMonitorRAM        true;;
			SWAP_MON)       printMonitorSwap;;
			SWAP_MON%)      printMonitorSwap       true;;
			HDDROOT_MON)    printMonitorHDD;;
			HDDROOT_MON%)   printMonitorHDD        true;;
			HDDHOME_MON)    printMonitorHome;;
			HDDHOME_MON%)   printMonitorHome       true;;
			CPUTEMP_MON)    printMonitorCPUTemp;;
			*)              printInfo "Unknown" "Check your config";;
		esac
	}
	local status_info=""
	for key in $print_info; do
		if [ -z "$status_info" ]; then
			local status_info="$(statusSwitch $key)"
		else
			local status_info="${status_info}\n$(statusSwitch $key)"
		fi
	done
	printf "${status_info}\n"
}
printHeader()
{
	local logo=$(echo "$fc_logo$logo$fc_none")
	local info=$(printStatusInfo)
	local term_cols=$(getTerminalNumCols)
	local logo_cols=$(getTextNumCols "$logo")
	local info_cols=$(getTextNumCols "$info")
	if [ $(( $logo_cols + $info_cols )) -le $term_cols ]; then
		if $print_logo_right ; then
			printTwoElementsSideBySide "$info" "$logo" "$print_cols_max"
		else
			printTwoElementsSideBySide "$logo" "$info" "$print_cols_max"
		fi
	elif [ $info_cols -le $term_cols ]; then
		if $print_logo_right ; then
			printTwoElementsSideBySide "$info" "" "$print_cols_max"
		else
			printTwoElementsSideBySide "" "$info" "$print_cols_max"
		fi
	fi
}
printLastLogins()
{
	if false; then
		printf "${fc_highlight}\nLAST LOGINS:\n${fc_info}"
		last -iwa | head -n 4 | grep -v "reboot"
	fi
}
printSystemctl()
{
	systcl_num_failed=$(systemctl --failed |\
	                    grep "loaded units listed" |\
	                    head -c 1)
	if [ "$systcl_num_failed" -ne "0" ]; then
		local failed=$(systemctl --failed | awk '/UNIT/,/^$/')
		printf "\n${fc_crit}SYSTEMCTL FAILED SERVICES:\n"
		printf "${fc_info}${failed}${fc_none}\n"
	fi
}
printHogsCPU()
{
	export LC_NUMERIC="C"
	if [ -z $crit_cpu_percent   ]; then exit 1; fi
	if [ -z $print_cpu_hogs_num ]; then exit 1; fi
	if [ -z $print_cpu_hogs     ]; then exit 1; fi
	if ! $print_cpu_hogs; then return; fi
	local current=$(awk '{avg_1m=($1)} END {printf "%3.2f", avg_1m}' /proc/loadavg)
	local max=$(nproc --all)
	local percent=$(bc <<< "$current*100/$max")
	if [ $percent -gt $crit_cpu_percent ]; then
		local top=$(nice 'top' -b -d 0.01 -n 1 )
		local cpus=$(echo "$top" | grep "Cpu(s)" )
		if [ -z "$cpus" ]; then
			local top=$(nice 'top' -b -d 0.01 -1 -n 1 )
			local cpus=$(echo "$top" | grep "Cpu(s)" )
		fi
		local top=$(echo "$top" | sed 's/\%/\%\%/g' )
		local load=$(echo "${cpus:9:36}" | tr '', ' ' )
		local header=$(echo "$top" | grep "%CPU" )
		local procs=$(echo "$top" |\
		              sed  '/top - /,/%CPU/d' |\
		              head -n "$print_cpu_hogs_num" )
		printf "\n${fc_crit}SYSTEM LOAD:${fc_info}  ${load}\n"
		printf "${fc_crit}$header${fc_none}\n"
		printf "${fc_info}${procs}${fc_none}\n"
	fi
}
printHogsMemory()
{
	if [ -z $crit_ram_percent  ]; then exit 1; fi
	if [ -z $crit_swap_percent ]; then exit 1; fi
	if [ -z $print_memory_hogs ]; then exit 1; fi
	if ! $print_memory_hogs; then return; fi
	local ram_is_crit=false
	local mem_info=$('free' -m | head -n 2 | tail -n 1)
	local current=$(echo "$mem_info" | awk '{mem=($2-$7)} END {printf mem}')
	local max=$(echo "$mem_info" | awk '{mem=($2)} END {printf mem}')
	local percent=$(bc <<< "$current*100/$max")
	if [ $percent -gt $crit_ram_percent ]; then
		local ram_is_crit=true
	fi
	local swap_is_crit=false
	local num_swap_devs=$(($(wc -l /proc/swaps | awk '{print $1;}') -1))	
	if [ "$num_swap_devs" -ge 1 ]; then
		local swap_info=$('free' -m | tail -n 1)
		local current=$(echo "$swap_info" | awk '{SWAP=($3)} END {printf SWAP}')
		local max=$(echo "$swap_info" | awk '{SWAP=($2)} END {printf SWAP}')
		local percent=$(bc <<< "$current*100/$max")
		if [ $percent -gt $crit_swap_percent ]; then
			local swap_is_crit=true
		fi
	fi
	if $ram_is_crit || $swap_is_crit ; then
		local available=$(echo $mem_info | awk '{print $NF}')
		local procs=$(ps --cols=80 -eo pmem,size,pid,cmd --sort=-%mem |\
			      head -n 4 | tail -n 3 |\
			      awk '{$2=int($2/1024)"MB";}
		                   {printf("%5s%8s%8s\t%s\n", $1, $2, $3, $4)}')
		printf "\n${fc_crit}MEMORY:\t "
		printf "${fc_info}Only ${available} MB of RAM available!!\n"
		printf "${fc_crit}    %%\t SIZE\t  PID\tCOMMAND\n"
		printf "${fc_info}${procs}${fc_none}\n"
	fi
}
local dir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
if [ "$(type -t getFormatCode)" != 'function' ]; then
	source "$dir/../bash-tools/bash-tools/color.sh"
fi
if [ "$(type -t printWithOffset)" != 'function' ]; then
	source "$dir/../bash-tools/bash-tools/print_utils.sh"
fi
local logo="
        -oydNMMMMNdyo-
     -yNMMMMMMMMMMMMMMNy-
   .hMMMMMMmhsooshmMMMMMMh.
  :NMMMMmo.        .omMMMMN:
 -NMMMMs    -+ss+-    sMMMMN-
 hMMMMs   -mMMMMMMm-   sMMMMh
'MMMMM.  'NMMMMMMMMN'  .MMMMM
'MMMMM.  'NMMMMMMMMN'   yMMMM'
 hMMMMs   -mMMMMMMMMy.   -yMh
 -NMMMMs    -+ss+yMMMMy.   -.
  :NMMMMmo.       .yMMMMy.
   .hMMMMMMmhsoo-   .yMMMy
     -yNMMMMMMMMMy-   .o-
        -oydNMMMMNd/
"
local print_info="
	OS
	KERNEL
	CPU
	GPU
	SHELL
	DATE
	UPTIME
	LOCALIPV4
	EXTERNALIPV4
	SERVICES
	CPUTEMP
	SYSLOAD_MON%
	MEMORY_MON
	SWAP_MON
	HDDROOT_MON
	HDDHOME_MON"
local format_info="-c white"
local format_highlight="-c blue  -e bold"
local format_crit="-c 208   -e bold"
local format_deco="-c white -e bold"
local format_ok="-c blue  -e bold"
local format_error="-c 208   -e bold -e blink"
local format_logo="-c blue -e bold"
local crit_cpu_percent=40
local crit_ram_percent=75
local crit_swap_percent=25
local crit_hdd_percent=85
local crit_home_percent=85
local bar_length=13
local bar_num_digits=5
local info_label_width=16
local print_cols_max=100
local print_logo_right=false
local date_format="%Y.%m.%d - %T"
local print_cpu_hogs_num=3
local print_cpu_hogs=true
local print_memory_hogs=true
local clear_before_print=false
local print_extra_new_line_top=true
local print_extra_new_line_bot=false
local user_config_file="$HOME/.config/synth-shell/status.config"
local sys_config_file="/etc/andresgongora/synth-shell/status.config"
if   [ -f $user_config_file ]; then
	source $user_config_file
elif [ -f $sys_config_file ]; then
	source $sys_config_file
fi
local fc_info=$(getFormatCode $format_info)
local fc_highlight=$(getFormatCode $format_highlight)
local fc_crit=$(getFormatCode $format_crit)
local fc_deco=$(getFormatCode $format_deco)
local fc_ok=$(getFormatCode $format_ok)
local fc_error=$(getFormatCode $format_error)
local fc_logo=$(getFormatCode $format_logo)
local fc_none=$(getFormatCode -e reset)
if $clear_before_print; then clear; fi
if $print_extra_new_line_top; then echo ""; fi
printHeader
printLastLogins
printSystemctl
printHogsCPU
printHogsMemory
if $print_extra_new_line_bot; then echo ""; fi
}
(status)
unset status
